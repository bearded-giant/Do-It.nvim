local doit_state, config

describe("sorting", function()
	before_each(function()
		-- Reinitialize the todos module for each test
		package.loaded["doit.state"] = nil  -- Clear cached state
		package.loaded["doit.state.sorting"] = nil  -- Clear sorting module too
		package.loaded["doit.state.priorities"] = nil  -- Clear priorities module
		package.loaded["doit.config"] = nil  -- Clear config too
		
		local doit = require("doit")
		doit.setup({
			modules = {
				todos = { enabled = true }
			},
			priorities = {
				{ name = "p1", weight = 3 },
				{ name = "p2", weight = 2 },
				{ name = "p3", weight = 1 }
			}
		})
		doit_state = require("doit.state")  -- Re-require after setup
		config = require("doit.config")  -- Re-require config after setup
		
		-- Make sure priority weights are initialized
		if doit_state.update_priority_weights then
			doit_state.update_priority_weights()
		end
	end)

	it("should sort by completion status first", function()
		doit_state.todos = {
			{ text = "Done todo", done = true, created_at = os.time() },
			{ text = "Pending todo", done = false, created_at = os.time() },
		}

		doit_state.sort_todos()

		assert.are.equal("Pending todo", doit_state.todos[1].text)
		assert.are.equal("Done todo", doit_state.todos[2].text)
	end)

	it("should prioritize in-progress todos at the top", function()
		doit_state.todos = {
			{ text = "Pending todo", done = false, in_progress = false, created_at = os.time() },
			{ text = "In-progress todo", done = false, in_progress = true, created_at = os.time() },
		}

		doit_state.sort_todos()

		assert.are.equal("In-progress todo", doit_state.todos[1].text)
		assert.are.equal("Pending todo", doit_state.todos[2].text)
	end)

	it("should sort in-progress todos by priority", function()
		doit_state.todos = {
			{ text = "In-progress low priority", done = false, in_progress = true, created_at = os.time(), priorities = "p3" },
			{ text = "In-progress high priority", done = false, in_progress = true, created_at = os.time(), priorities = "p1" },
		}

		doit_state.sort_todos()

		assert.are.equal("In-progress high priority", doit_state.todos[1].text)
		assert.are.equal("In-progress low priority", doit_state.todos[2].text)
	end)

	it("should sort by priority score second", function()
		doit_state.todos = {
			{ text = "Low priority", done = false, created_at = os.time(), priorities = "p3" },
			{ text = "High priority", done = false, created_at = os.time(), priorities = "p1" },
		}

		doit_state.sort_todos()

		assert.are.equal("High priority", doit_state.todos[1].text)
		assert.are.equal("Low priority", doit_state.todos[2].text)
	end)

	it("should sort by due date third", function()
		local now = os.time()
		local tomorrow = now + 86400 -- 24 hours
		local nextWeek = now + 604800 -- 7 days

		doit_state.todos = {
			{ text = "Due next week", done = false, created_at = now, priorities = nil, due_at = nextWeek },
			{ text = "Due tomorrow", done = false, created_at = now, priorities = nil, due_at = tomorrow },
		}

		doit_state.sort_todos()

		assert.are.equal("Due tomorrow", doit_state.todos[1].text)
		assert.are.equal("Due next week", doit_state.todos[2].text)
	end)

	it("should sort items with due dates before those without", function()
		local now = os.time()
		local tomorrow = now + 86400 -- 24 hours

		doit_state.todos = {
			{ text = "No due date", done = false, created_at = now, priorities = nil },
			{ text = "Has due date", done = false, created_at = now, priorities = nil, due_at = tomorrow },
		}

		doit_state.sort_todos()

		assert.are.equal("Has due date", doit_state.todos[1].text)
		assert.are.equal("No due date", doit_state.todos[2].text)
	end)

	it("should sort by creation time last", function()
		local earlier = 1000
		local later = 2000

		doit_state.todos = {
			{ text = "Newer todo", done = false, created_at = later },
			{ text = "Older todo", done = false, created_at = earlier },
		}

		-- Debug: check values before sort
		assert.are.equal(2000, doit_state.todos[1].created_at, "First should have created_at 2000")
		assert.are.equal(1000, doit_state.todos[2].created_at, "Second should have created_at 1000")
		
		doit_state.sort_todos()

		assert.are.equal("Older todo", doit_state.todos[1].text)
		assert.are.equal("Newer todo", doit_state.todos[2].text)
	end)

	it("should handle complex sorting with all criteria", function()
		local now = os.time()
		local yesterday = now - 86400
		local tomorrow = now + 86400

		doit_state.todos = {
			{ text = "Done, high priority", done = true, created_at = yesterday, priorities = "p1" },
			{
				text = "Pending, high priority, due tomorrow",
				done = false,
				created_at = now,
				priorities = "p1",
				due_at = tomorrow,
			},
			{
				text = "In-progress, low priority",
				done = false,
				in_progress = true,
				created_at = yesterday,
				priorities = "p3",
			},
			{
				text = "Pending, high priority, no due date",
				done = false,
				created_at = now,
				priorities = "p1",
			},
			{ text = "Done, low priority", done = true, created_at = now, priorities = "p3" },
		}

		doit_state.sort_todos()

		assert.are.equal("In-progress, low priority", doit_state.todos[1].text)
		assert.is_false(doit_state.todos[2].done)
		assert.is_false(doit_state.todos[3].done)
		assert.is_true(doit_state.todos[4].done)
		assert.is_true(doit_state.todos[5].done)
	end)
end)

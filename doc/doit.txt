*doit.txt*              A Minimalist Todo List Manager                *doit*

==============================================================================
Table of Contents                                          *doit-contents*

1. doit                                                        |doit-intro|
  - Features                                                  |doit-features|
  - Requirements                                          |doit-requirements|
  - Installation                                          |doit-installation|
  - Configuration                                        |doit-configuration|
  - Usage                                                        |doit-usage|
  - Commands                                                  |doit-commands|
  - Keybindings                                            |doit-keybindings|
2. Advanced                                                    |doit-advanced|
  - Calendar                                                 |doit-calendar|
  - Priority System                                         |doit-priorities|
  - Import/Export                                             |doit-import|
  - Project Notes                                              |doit-notes|
3. Colors                                                      |doit-colors|
4. Roadmap                                                    |doit-roadmap|

==============================================================================
1. doit                                                        *doit-intro*

Do-It.nvim is a minimalist todo list manager for Neovim, designed with simplicity and
efficiency in mind. It provides a clean, distraction-free interface to manage
your tasks directly within Neovim.

Do-It.nvim is my personal way of how I want to track my tasks and todos. As a 
Principal Engineer, I have a lot of things to keep track of, and I wanted a 
simple way to do that without leaving my editor. I've tried a lot of todo list 
managers, and they all seem to be too much for me. I just want to keep track of 
what I need to do, and that's it. I don't need a bunch of bells and whistles. 
I just need to know what I need to do.

Do-It.nvim is 100% built on top of Dooing by atiladefreitas. Do-It.nvim is a fork with 
some heavy modifications for customizations for how I work, while maintaining 
the core functionality.

FEATURES                                                      *doit-features*

- Manage to-dos in a simple and efficient way
- Categorize tasks with #tags
- Simple task management with clear visual feedback
- Persistent storage of your to-dos
- Adapts to your Neovim colorscheme
- Compatible with Lazy.nvim for effortless installation
- Relative timestamps showing when to-dos were created
- Import/Export of to-do json for backups, obsidian integration...whatever you want
- To-do reordering with customizable keybindings
- In-progress (active) to-dos automatically float to the top of the list and sort by priority
- Quick list view of active to-dos with auto-refresh
- Lualine integration to show your top active to-do
- Project-specific notes for documenting your work

REQUIREMENTS                                              *doit-requirements*

- Neovim >= 0.10.0
- Lazy.nvim as your plugin manager

INSTALLATION                                              *doit-installation*

Using Lazy.nvim: >lua
    return {
        "bearded-giant/do-it.nvim",
        config = function()
            require("doit").setup({
                -- your configuration here
            })
        end,
    }
<

Then run `:Lazy sync` to install and sync the plugin, or relaunch Neovim.

CONFIGURATION                                            *doit-configuration*

Do-It.nvim uses a nested configuration structure that separates core framework
settings from module-specific options. This organization makes the configuration
easier to navigate and understand.

Configuration Structure Overview:
>lua
    {
        -- Core framework settings (top level)
        development_mode = false,
        quick_keys = true,
        timestamp = { enabled = true },
        lualine = { enabled = true, max_length = 30 },
        project = {
            enabled = true,
            detection = {
                use_git = true,
                fallback_to_cwd = true,
            },
        },
        
        -- Module configurations
        modules = {
            todos = {
                enabled = true,
                ui = {
                    window = {
                        width = 55,
                        height = 20,
                        border = "rounded",
                        position = "center",
                    },
                    -- list_window, calendar, scratchpad...
                },
                formatting = {
                    pending = { icon = "‚óã" },
                    in_progress = { icon = "‚óê" },
                    done = { icon = "‚úì" },
                },
                priorities = {
                    { name = "critical", weight = 16 },
                    { name = "urgent", weight = 8 },
                    { name = "important", weight = 4 },
                },
                storage = {
                    save_path = vim.fn.stdpath("data") .. "/doit_todos.json",
                    import_export_path = vim.fn.expand("~/todos.json"),
                },
                keymaps = {
                    toggle_window = "<leader>td",
                    new_todo = "i",
                    -- ... all todo keymaps
                },
            },
            notes = {
                enabled = true,
                ui = {
                    window = {
                        -- Absolute sizing (in columns/lines)
                        width = 80,
                        height = 30,
                        -- Or relative sizing (percentage)
                        relative_width = 0.6,
                        relative_height = 0.6,
                        use_relative = true,  -- Toggle between modes
                        position = "center",  -- center, top-left, etc.
                        border = "rounded",
                        title = " Notes ",
                        title_pos = "center",
                    },
                    icons = {
                        note = "üìì",
                        linked = "üîó",
                    },
                },
                storage = {
                    path = vim.fn.stdpath("data") .. "/doit/notes",
                    mode = "project",  -- "global" or "project"
                },
                keymaps = {
                    toggle = "<leader>dn",
                    close = "q",
                    switch_mode = "m",
                },
            },
        },
    }
<

Key Configuration Points:

- Core settings (top level): Framework-wide configurations
- Module settings (modules.todos and modules.notes): Module-specific options
- UI configurations are nested under each module's `ui` table
- Storage paths and options are under each module's `storage` table
- Keymaps are module-specific and found in each module's `keymaps` table

Notes Window Sizing:~

The notes module supports flexible window sizing:
- Absolute: Set `width` and `height` in columns/lines
- Relative: Set `relative_width` and `relative_height` as percentages (0.0-1.0)
- Toggle: Use `use_relative = true/false` to switch between modes
- Position: Choose from center, top-left, top-right, bottom-left, bottom-right

For a complete list of all configuration options with detailed descriptions,
see the file `lua/doit/config.lua` in the plugin directory.

Legacy Configuration:~

The plugin maintains backward compatibility with the flat configuration
structure. Legacy options at the root level will still work but are deprecated
in favor of the nested structure.
                name = "urgent",
                weight = 2,
            },
        },
        priority_groups = {
            high = {
                members = { "important", "urgent" },
                color = nil,
                hl_group = "DiagnosticError",
            },
            medium = {
                members = { "important" },
                color = nil,
                hl_group = "DiagnosticWarn",
            },
            low = {
                members = { "urgent" },
                color = nil,
                hl_group = "DiagnosticInfo",
            },
        },
        hour_score_value = 1/8,
    }
<

USAGE                                                          *doit-usage*

Basic Operations:
1. Open the to-do window with `:Doit`
2. Add new to-dos with `i`
3. Toggle completion with `x`
4. Delete to-dos with `d`
5. Add due dates with `H`
6. Add priorities during creation
7. Filter by tags with `t`

COMMANDS                                                      *doit-commands*

                                                                    *:Doit*
Main command to interact with the plugin.

Arguments:~
    none            Opens/toggles the to-do window
    add [text]      Creates a new to-do
      -p, --priority [name]     Name of the priority to assign
    list            Lists all to-dos in the command line
    set             Modifies to-do properties

                                                                    *:DoItList*
Toggle a floating window showing active to-dos.

                                                                    *:DoitNotes*
Toggle the project notes window.

Examples: >vim
    :Doit
    :Doit add My new task #work
    :Doit add -p important My priority task
    :Doit list
    :Doit set 1 priorities important
    :Doit set 2 ect 2h
    :DoitNotes     " Opens or closes the notes window
<

KEYBINDINGS                                                *doit-keybindings*

Main Window~
    <leader>td   Toggle to-do window
    <leader>dl   Toggle active to-dos list window
    <leader>dn   Toggle project notes window
    i           Add new to-do
    x           Toggle to-do status
    d           Delete current to-do
    D           Delete all completed
    q           Close window
    H           Add due date
    r           Remove due date
    T           Add time estimation
    R           Remove time estimation
    ?           Toggle help window
    t           Toggle tags window
    c           Clear active tag filter
    e           Edit to-do
    p           Edit priorities
    u           Undo deletion
    /           Search to-dos
    I           Import to-dos
    E           Export to-dos
    <leader>D   Remove duplicates
    <Space>     Toggle priority
    <leader>p   Open scratchpad
    r           Enter reordering mode

Reordering to-dos~
    k           Move to-do up
    j           Move to-do down
    r           Save and exit reordering

Tags Window~
    e           Edit tag
    d           Delete tag
    <CR>        Filter by tag
    q           Close window

Calendar Window~
    h           Previous day
    l           Next day
    k           Previous week
    j           Next week
    H           Previous month
    L           Next month
    <CR>        Select date
    q           Close calendar
    
Notes Window~
    q           Close notes window
    m           Switch between global and project notes

==============================================================================
2. Advanced                                                    *doit-advanced*

CALENDAR                                                     *doit-calendar*

The calendar feature provides a visual way to set due dates. 
Supported languages: en, pt, es, fr, de, it, jp

Configure the calendar: >lua
    calendar = {
        language = "en",  -- Calendar language
        icon = "",      -- Icon for due dates
        keymaps = {
            previous_day = "h",
            next_day = "l",
            previous_week = "k",
            next_week = "j",
            previous_month = "H",
            next_month = "L",
            select_day = "<CR>",
            close_calendar = "q",
        },
    }
<

PRIORITY SYSTEM                                             *doit-priorities*

Configure priorities and their weights: >lua
    priorities = {
        { name = "critical", weight = 16 },
        {
            name = "urgent",
            weight = 8,
        },
        {
            name = "important",
            weight = 4,
        },
    },
    priority_groups = {
        critical = {
            members = { "critical" },
            color = "#FF0000",
        },
        high = {
            members = { "urgent" },
            color = nil,
            hl_group = "DiagnosticError",
        },
        medium = {
            members = { "important" },
            color = nil,
            hl_group = "DiagnosticWarn",
        },
    }
<

Sorting by Priority~
1. In-progress (active) todos are always displayed at the top
2. When multiple in-progress todos exist, they're sorted by priority (critical, then urgent, then important)
3. All other todos follow the standard sorting (priority, due date, creation time)

Note: Each todo can have only one priority assigned.

IMPORT/EXPORT                                                 *doit-import*

Import and export todos using JSON format: >vim
    :Doit export ~/todos.json
    :Doit import ~/todos.json
<

==============================================================================
3. Colors                                                      *doit-colors*

Highlight Groups~
`DoItPending`       Pending to-dos
`DoItDone`          Completed to-dos
`DoItHelpText`      Help window text
`DoItQuickTitle`    Quick keys title
`DoItQuickKey`      Quick keys keybindings
`DoItQuickDesc`     Quick keys descriptions

PROJECT NOTES                                                 *doit-notes*

Project Notes adds project-specific notes functionality to Do-It.nvim, inspired by 
maple.nvim. This feature allows you to maintain separate notes for each project
while working in Neovim, making it easy to document project-specific information 
and thoughts without leaving your editor.

Features:
- Project-specific notes that follow your Git repository or working directory
- Global notes mode for system-wide documentation
- Easy switching between global and project modes
- Persistent storage of notes in JSON format
- Markdown highlighting for better readability
- Floating window interface consistent with other Do-It.nvim components

Project Notes is designed to complement your to-do workflow:
- Store project-specific documentation alongside your to-dos
- Document implementation details, decisions, and references
- Keep track of project-related thoughts and ideas
- Use markdown formatting for better organization

The notes are automatically saved when:
- The notes window is closed
- You switch between global and project modes
- You navigate away from the buffer

==============================================================================
4. Roadmap                                                    *doit-roadmap*

- ‚úì Reorder To-dos
- ‚úì Active To-do to Top
- ‚úì Project Notes
- Named (and Multiple) To-do Lists
- To-do Categories View

==============================================================================

ACKNOWLEDGMENTS

Do-It.nvim is FOR SURE based on Dooing by atiladefreitas. Special thanks to 
him for creating the original plugin that inspired this fork.

The Project Notes feature was inspired by maple.nvim's project notes functionality.

